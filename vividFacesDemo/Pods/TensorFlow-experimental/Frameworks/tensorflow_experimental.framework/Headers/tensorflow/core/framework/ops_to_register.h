// This file was autogenerated by print_selective_registration_header.py
#ifndef OPS_TO_REGISTER
#define OPS_TO_REGISTER

    namespace {
      constexpr const char* skip(const char* x) {
        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;
      }

      constexpr bool isequal(const char* x, const char* y) {
        return (*skip(x) && *skip(y))
                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))
                   : (!*skip(x) && !*skip(y));
      }

      template<int N>
      struct find_in {
        static constexpr bool f(const char* x, const char* const y[N]) {
          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);
        }
      };

      template<>
      struct find_in<0> {
        static constexpr bool f(const char* x, const char* const y[]) {
          return false;
        }
      };
    }  // end namespace
    constexpr const char* kNecessaryOpKernelClasses[] = {
"UnaryOp<CPUDevice, functor::abs<float>>",
"BinaryOp<CPUDevice, functor::add<float>>",
"BinaryOp<CPUDevice, functor::add<int32>>",
"ReductionOp<CPUDevice, bool, int32, Eigen::internal::AndReducer>",
"ApplyRMSPropOp<CPUDevice, float>",
"ArgMaxOp<CPUDevice, float, int32>",
"AssertOp",
"AssignOpT<CPUDevice, ::tensorflow::int32>",
"AssignOpT<CPUDevice, ::tensorflow::int64>",
"AssignOpT<CPUDevice, float>",
"DenseUpdateOp<CPUDevice, ::tensorflow::int32, DenseUpdateType::ADD>",
"DenseUpdateOp<CPUDevice, float, DenseUpdateType::SUB>",
"BatchMatMul<CPUDevice, float>",
"BiasOp<CPUDevice, float>",
"BiasGradOp<CPUDevice, float>",
"BCastGradArgsOp<int32>",
"CpuCastOp",
"UnaryOp<CPUDevice, functor::ceil<float>>",
"ConcatOffsetOp",
"ConcatV2Op<CPUDevice, ::tensorflow::int32>",
"ConcatV2Op<CPUDevice, float>",
"ConstantOp",
"Conv2DOp<CPUDevice, float>",
"Conv2DCustomBackpropFilterOp<CPUDevice, float>",
"Conv2DCustomBackpropInputOp<CPUDevice, float>",
"ScanOp<CPUDevice, ::tensorflow::int32, Eigen::internal::SumReducer<::tensorflow::int32>, int32>",
"DepthwiseConv2dNativeOp<CPUDevice, float>",
"DepthwiseConv2dNativeBackpropFilterOp<CPUDevice, float>",
"DepthwiseConv2dNativeBackpropInputOp<CPUDevice, float>",
"DynamicStitchOpCPU<::tensorflow::int32>",
"EnterOp",
"BinaryOp<CPUDevice, functor::equal_to<float>>",
"BinaryOp<CPUDevice, functor::equal_to<int32>>",
"ExitOp",
"UnaryOp<CPUDevice, functor::exp<float>>",
"ExpandDimsOp<int32>",
"FillOp<CPUDevice, ::tensorflow::int32, int32>",
"FillOp<CPUDevice, float, int32>",
"UnaryOp<CPUDevice, functor::floor<float>>",
"BinaryOp<CPUDevice, functor::safe_floor_div<int32>>",
"BinaryOp<CPUDevice, functor::safe_floor_mod<int32>>",
"FusedBatchNormOp<CPUDevice, float, float>",
"FusedBatchNormGradOp<CPUDevice, float, float>",
"GatherOp<CPUDevice, ::tensorflow::int32, int64>",
"GatherOp<CPUDevice, bool, int32>",
"GatherOp<CPUDevice, float, int32>",
"BinaryOp<CPUDevice, functor::greater<float>>",
"BinaryOp<CPUDevice, functor::greater<int32>>",
"BinaryOp<CPUDevice, functor::greater_equal<float>>",
"BinaryOp<CPUDevice, functor::greater_equal<int32>>",
"IdentityOp",
"UnaryOp<CPUDevice, functor::isnan<float>>",
"L2LossOp<CPUDevice, float>",
"BinaryOp<CPUDevice, functor::less<float>>",
"BinaryOp<CPUDevice, functor::less<int32>>",
"BinaryOp<CPUDevice, functor::less_equal<float>>",
"BinaryOp<CPUDevice, functor::less_equal<int32>>",
"UnaryOp<CPUDevice, functor::log<float>>",
"UnaryOp<CPUDevice, functor::log1p<float>>",
"BinaryOp<CPUDevice, functor::logical_and>",
"BinaryOp<CPUDevice, functor::logical_or>",
"LoopCondOp",
"MatMulOp<CPUDevice, float, false >",
"(DeterminantOp<float>)",
"MatrixDiagOp<CPUDevice, float>",
"ReductionOp<CPUDevice, float, int32, Eigen::internal::MaxReducer<float>>",
"BinaryOp<CPUDevice, functor::maximum<float>>",
"BinaryOp<CPUDevice, functor::maximum<int32>>",
"ReductionOp<CPUDevice, float, int32, Eigen::internal::MeanReducer<float>>",
"MergeOp",
"ReductionOp<CPUDevice, float, int32, Eigen::internal::MinReducer<float>>",
"BinaryOp<CPUDevice, functor::minimum<float>>",
"BinaryOp<CPUDevice, functor::minimum<int32>>",
"BinaryOp<CPUDevice, functor::mul<float>>",
"BinaryOp<CPUDevice, functor::mul<int32>>",
"UnaryOp<CPUDevice, functor::neg<float>>",
"NextIterationOp",
"NoOp",
"NonMaxSuppressionV3Op<CPUDevice>",
"BinaryOp<CPUDevice, functor::not_equal_to<float>>",
"OneHotOp<CPUDevice, float, int32>",
"PackOp<CPUDevice, ::tensorflow::int32>",
"PackOp<CPUDevice, float>",
"PadOp<CPUDevice, float, int32>",
"PlaceholderOp",
"BinaryOp<CPUDevice, functor::pow<float>>",
"PhiloxRandomOp<CPUDevice, random::NormalDistribution<random::PhiloxRandom, float>>",
"RangeOp<::tensorflow::int32>",
"RankOp",
"BinaryOp<CPUDevice, functor::div<float>>",
"UnaryOp<CPUDevice, functor::inverse<float>>",
"Relu6Op<CPUDevice, float>",
"Relu6GradOp<CPUDevice, float>",
"ReshapeOp",
"ResizeBilinearOp<CPUDevice, float>",
"RestoreV2",
"SaveV2",
"SummaryScalarOp<float>",
"SelectOp<CPUDevice, ::tensorflow::int32>",
"SelectOp<CPUDevice, float>",
"ShapeOp<int32>",
"ShapeNOp<int32>",
"UnaryOp<CPUDevice, functor::sigmoid<float>>",
"UnaryOp<CPUDevice, functor::sign<float>>",
"SizeOp<int32>",
"SliceOp<CPUDevice, ::tensorflow::int32>",
"SliceOp<CPUDevice, float>",
"SplitOpCPU<float>",
"UnaryOp<CPUDevice, functor::sqrt<float>>",
"SqueezeOp",
"StridedSliceOp<CPUDevice, ::tensorflow::int32>",
"StridedSliceOp<CPUDevice, bool>",
"StridedSliceOp<CPUDevice, float>",
"BinaryOp<CPUDevice, functor::sub<float>>",
"BinaryOp<CPUDevice, functor::sub<int32>>",
"BinaryOp<CPUDevice, functor::sub<int64>>",
"ReductionOp<CPUDevice, ::tensorflow::int32, int32, Eigen::internal::SumReducer<::tensorflow::int32>>",
"ReductionOp<CPUDevice, float, int32, Eigen::internal::SumReducer<float>>",
"(SvdOp<float>)",
"SwitchOp",
"TileOp<CPUDevice, int32>",
"TopK<CPUDevice, float>",
"TransposeCpuOp",
"PhiloxRandomOp<CPUDevice, random::TruncatedNormalDistribution<random::SingleSampleAdapter<random::PhiloxRandom>, float>>",
"UnpackOp<CPUDevice, ::tensorflow::int32>",
"UnpackOp<CPUDevice, float>",
"UnsortedSegmentReductionOp<float, int32, functor::UnsortedSegmentFunctor<CPUDevice, float, int32, functor::Zero<float>, functor::SumOp<float>> >",
"VariableOp",
"WhereCPUOp<bool>",
"ZerosLikeOp<CPUDevice, float>",
"RecvOp",
"SendOp",
};
#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))

constexpr inline bool ShouldRegisterOp(const char op[]) {
  return false
     || isequal(op, "Abs")
     || isequal(op, "Add")
     || isequal(op, "All")
     || isequal(op, "ApplyRMSProp")
     || isequal(op, "ArgMax")
     || isequal(op, "Assert")
     || isequal(op, "Assign")
     || isequal(op, "AssignAdd")
     || isequal(op, "AssignSub")
     || isequal(op, "BatchMatMul")
     || isequal(op, "BiasAdd")
     || isequal(op, "BiasAddGrad")
     || isequal(op, "BroadcastGradientArgs")
     || isequal(op, "Cast")
     || isequal(op, "Ceil")
     || isequal(op, "ConcatOffset")
     || isequal(op, "ConcatV2")
     || isequal(op, "Const")
     || isequal(op, "Conv2D")
     || isequal(op, "Conv2DBackpropFilter")
     || isequal(op, "Conv2DBackpropInput")
     || isequal(op, "Cumsum")
     || isequal(op, "DepthwiseConv2dNative")
     || isequal(op, "DepthwiseConv2dNativeBackpropFilter")
     || isequal(op, "DepthwiseConv2dNativeBackpropInput")
     || isequal(op, "DynamicStitch")
     || isequal(op, "Enter")
     || isequal(op, "Equal")
     || isequal(op, "Exit")
     || isequal(op, "Exp")
     || isequal(op, "ExpandDims")
     || isequal(op, "Fill")
     || isequal(op, "Floor")
     || isequal(op, "FloorDiv")
     || isequal(op, "FloorMod")
     || isequal(op, "FusedBatchNorm")
     || isequal(op, "FusedBatchNormGrad")
     || isequal(op, "GatherV2")
     || isequal(op, "Greater")
     || isequal(op, "GreaterEqual")
     || isequal(op, "Identity")
     || isequal(op, "IsNan")
     || isequal(op, "L2Loss")
     || isequal(op, "Less")
     || isequal(op, "LessEqual")
     || isequal(op, "Log")
     || isequal(op, "Log1p")
     || isequal(op, "LogicalAnd")
     || isequal(op, "LogicalOr")
     || isequal(op, "LoopCond")
     || isequal(op, "MatMul")
     || isequal(op, "MatrixDeterminant")
     || isequal(op, "MatrixDiag")
     || isequal(op, "Max")
     || isequal(op, "Maximum")
     || isequal(op, "Mean")
     || isequal(op, "Merge")
     || isequal(op, "Min")
     || isequal(op, "Minimum")
     || isequal(op, "Mul")
     || isequal(op, "Neg")
     || isequal(op, "NextIteration")
     || isequal(op, "NoOp")
     || isequal(op, "NonMaxSuppressionV3")
     || isequal(op, "NotEqual")
     || isequal(op, "OneHot")
     || isequal(op, "Pack")
     || isequal(op, "Pad")
     || isequal(op, "Placeholder")
     || isequal(op, "Pow")
     || isequal(op, "RandomStandardNormal")
     || isequal(op, "Range")
     || isequal(op, "Rank")
     || isequal(op, "RealDiv")
     || isequal(op, "Reciprocal")
     || isequal(op, "Relu6")
     || isequal(op, "Relu6Grad")
     || isequal(op, "Reshape")
     || isequal(op, "ResizeBilinear")
     || isequal(op, "RestoreV2")
     || isequal(op, "SaveV2")
     || isequal(op, "ScalarSummary")
     || isequal(op, "Select")
     || isequal(op, "Shape")
     || isequal(op, "ShapeN")
     || isequal(op, "Sigmoid")
     || isequal(op, "Sign")
     || isequal(op, "Size")
     || isequal(op, "Slice")
     || isequal(op, "Split")
     || isequal(op, "Sqrt")
     || isequal(op, "Squeeze")
     || isequal(op, "StridedSlice")
     || isequal(op, "Sub")
     || isequal(op, "Sum")
     || isequal(op, "Svd")
     || isequal(op, "Switch")
     || isequal(op, "Tile")
     || isequal(op, "TopKV2")
     || isequal(op, "Transpose")
     || isequal(op, "TruncatedNormal")
     || isequal(op, "Unpack")
     || isequal(op, "UnsortedSegmentSum")
     || isequal(op, "VariableV2")
     || isequal(op, "Where")
     || isequal(op, "ZerosLike")
     || isequal(op, "_Recv")
     || isequal(op, "_Send")
  ;
}
#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)

#define SHOULD_REGISTER_OP_GRADIENT false
#endif
